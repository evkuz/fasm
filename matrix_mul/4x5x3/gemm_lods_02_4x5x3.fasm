; 24.05.2020
; Исправил прохождение индексов.
; Теперь все точно правильно перемножается.
; ЛУчше поздно, чем никогда 
;
; 02.06.2020 Оптимизируем.
; Смотрим разницу во времени перемножения.
; - mov edx, [ mxA + ebx + ecx ] - 1 строка вместо 3
; 
format ELF executable 3
entry start


;section '.data' data readable writeable
segment readable writeable


FilePath_A db 'data_A.bin',0 ; Файл с данными матрицы А
FilePath_B db 'data_B.bin',0 ; Файл с данными матрицы В
FilePath_C db 'data_C_gemm_02.bin',0 ; Файл с данными матрицы C

BytesRead dd 0
BytesWritten dd 0
;Buffer rb 500000
;2500 элементов по 4 байта
; (1000x10000) * (10000x1000) => 1000x1000 

Buffer_size_A = 80 ; Размер матрицы А в словах по 4 байта
Buffer_size_B = 60 ; Размер матрицы В в словах по 4 байта
Buffer_size_C = 48 ; Размер матрицы С в словах по 4 байта
;Buffer_size dd 100  ;equ ($ - Buffer) ; Calculates the size at compile time
;Buffer_C dd 40000
;Buf_C_Size dd 100
;NULL equ 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
mxA     rd 20; Матрица А 2*3
mxrA    dd 4           ; Матрица А число строк
mxB     rd 15 ; Матрица B 3*4
mxrB    dd 5                        ; Матрица В число строк (и столбцов в Матрице А)
mxcolC  dd 3                        ; Матрица С (итоговая), количество столбцов (строк как в матрице А)
mxCind  dd 0                        ; индекс столбца в итоговой матрице
mxAcol  dd 0                        ; индекс столбца в матрице А
mxBrow  dd 0                        ; индекс строки в матрице В
mxArow  dd 0
mxBcol  dd 0
;room_01 dd 0     ; Выравниванием память
;room_02 dd 0     ; для удобства наблюдения в дебаггере
st_time_val  dd  0  ; start time value
fin_time_val dd  0  ; finish time value
str_of_time  rb 10

result  rd 12     ; Массив с элементами новой матрицы
;---------------------------------------------

segment readable executable
;section '.code' code readable executable
include '/home/evkuz/asm/int_2_str.inc'
  start:
      push ebp
      mov  ebp, esp
        xor ebx,ebx  ; ЭЛЕМЕНТ МАТРИЦЫ С
        xor eax,eax   ; ИНДЕКС СТРОКИ МАТРИЦЫ А

        xor ecx,ecx   ; ЭЛЕМЕНТ МАТРИЦЫ А
        xor edx,edx   ; ЭЛЕМЕНТ МАТРИЦЫ В
        xor edi, edi

; Считываем данные из файла в массив матрицы А  - mxA
;;;;;;;;;;;;; OPEN FILE Matrix A  ;;;;;;;;;;;;;;;;;;;;;;;;
mov eax,0x05
mov ebx,FilePath_A
mov ecx,0 ; O_RDONLY        =       00
mov edx,0  ; file already exists so no more options

int 80h

mov ebx,eax              ; file descriptor to ebx
;;;;;;;;;;;;; READ FROM FILE Matrix A ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
mov eax, 0x03           ; read from file
mov ecx, mxA        ; address of data 
mov edx, Buffer_size_A            ; size (amount) of data
int 80h

; Считываем данные из файла в массив матрицы B  - mxB
;;;;;;;;;;;;; OPEN FILE Matrix B  ;;;;;;;;;;;;;;;;;;;;;;;;
mov eax,0x05
mov ebx,FilePath_B
mov ecx,0 ; O_RDONLY        =       00
mov edx,0  ; file already exists so no more options

int 80h

mov ebx,eax              ; file descriptor to ebx
;;;;;;;;;;;;; READ FROM FILE Matrix B ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
mov eax, 0x03           ; read from file
mov ecx, mxB       ; address of data 
mov edx, Buffer_size_B            ; size (amount) of data
int 80h


; Получить время начала работы процесса 
start_time_stamp:
    mov eax, 13
    mov ebx, st_time_val ; pointer going to store the return value
    int 0x80
;;;;;;;;;;;;;;;;;;; output start_time_stamp ;;;;;;;;;;;;;;;;
  mov eax, dword [st_time_val]
  mov edi, str_of_time
  call int_to_string
  mov eax,4           ; sys_write - код 4
  mov ebx,1           ; stdout   mycommand 2>&1    0 - STDIN, 1 - STDOUT, 2 - STDERR
  mov ecx,str_of_time ; Адрес строки, т.е 1-го байта 
  ;mov  edx,msg_size    ; Размер строки уже в edx после завершения 'int_to_string'
  int 0x80            ; Вызов прерывания


 push 0 ; Далее пригодится
 mov esi, mxA ; кладем в источник матрцу А
 matrixA:

          lodsd
          mov edx, eax        ; получили текущий элемент матрицы А
          inc [mxAcol]

                                   ;  начало строки, 
                                   ;  mxcolC - кол-во эл-тов
                                   ;  в строке, а
                                   ;  4 - размер элемента  
                                   ; |--------------------|   |--столбец в нужной строке
matrixB:                           ; [mxB + mxBrow*mxcolC*4 + mxCind*4]
          mov ebx, [mxBrow]        ; [mxBrow] индекс строки, матрица В
          imul ebx, [mxcolC]
          imul ebx, 4              ; встали в начало строки

          mov eax,[mxCind]
          imul eax,4
          mov ecx, mxB
          add ecx, ebx
B_fset:   add ecx, eax        ; получили адрес элемента матрицы B 
                                   ; начало + смещение
          inc [mxBrow]


MatrixC:   
          mov eax, [ecx]
          imul eax, edx ; Умножаем элементы матриц A, B
          ; EСX хранит произведение элементов
          mov ebx, eax  ; сохраняем произведение
          ;EBX хранит cумму произведений элементов, и в итоге (после n-прохода цикла )элемент матрицы С

          ; Получили адрес элемента массива, где будет храниться новое значение элемента матрицы.

          pop edx         ; Берем предыдущую сумму элементов    
          add ebx, edx    ; ДОбавляем вновь полученный элемент, получаем новое значение суммы.
          
          push ebx           ; сохраняем новое значение суммы в стек

          mov eax, [mxAcol]
          cmp eax, [mxrB] ; Все столбцы в строке матрицы А ?

      jne matrixA ; if ne, то Переходим к следующему столбцу матрицы A в текущей строке
          ; Прошли 1 цикл умножения 1 строки матрицы А на 1 столбец матрицы В.
          ; 
          ; Переходим к следующему столбцу матрицы В (строка матрицы А все та же),
          ; получим следующий элемент матрицы С
          ; Надо его сохрянять рядом с соседним элементом.
          ; Вот тут надо элемент матрицы С положить в массив  
          ; Вычисляем положение нового элемента относительно начала массива result

          mov eax, [mxCind]  ; result + mxCind*4 + mxArow*4*mxcolC
          imul eax, 4
          mov ecx, [mxArow]
          imul ecx, 4       ; Умножаем на индекс строки
          imul ecx, [mxcolC]
          add eax, ecx
          mov ecx, result
          add ecx, eax ; Получили адрес, куда сохранить новый элемент матрицы С
          
          pop ebx
          mov [ecx], ebx  ; сохранили значение в памяти ПО НОВОМУ АДРЕСУ

          mov [mxAcol], 0 ; индекс стоблца в матрице А Обнуляем, строка та же.
          mov [mxBrow], 0    ; индекс строки в матрице В Обнуляем

           mov ebx, [mxArow] ; индекс строки Матрица А
           imul ebx, 4
           imul ebx, [mxrB] ; mxrB - количество столбцов в mxA
                            ; в начало нужной строки
          ;mov esi, mxA;
          ;add esi, ebx ; Указатель на начало нужной строки
          lea esi, [mxA + ebx]
          
          push 0             ; ОБнуляем в стеке сумму элементов

          inc [mxCind]      ; начинаем новый столбец (элемент в строке) итоговой матрицы.
          mov eax, [mxcolC] ; == 100
          cmp [mxCind], eax  ; столбцов не может быть больше mxcolC
      jne matrixA        ; if ne, то Переходим к следующему столбцу матрицы В, если их еще меньше mxcolC
          ; Прошли все столбцы в матрице В, получили очередной элемент матрицы С
          ; Переходим к новой строке в матрице А
          mov [mxCind],0  ; Обнуляем счетчик столбцов матрицы В
          
          inc [mxArow]    ; индекс строки матрицы А увеличиваем     
          ;;;;;;;;;;; переносим esi на начало нужной строки
          mov ebx, [mxArow] ; индекс строки Матрица А
          imul ebx, 4
          imul ebx, [mxrB] ; mxrB - количество столбцов в mxA
                            ; в начало нужной строки

        ;  mov esi, mxA ; Указатель на начало нужной строки
        ;  add esi, ebx ;
        lea esi, [mxA + ebx]
          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
          mov eax, [mxArow]
          cmp [mxrA], eax  ; Все строки в матрице А ? 
      jne matrixA      ; if ne, то Переходим к следующей строке в матрице А
         


finish_time_stamp:
    mov eax, 13
    mov ebx, fin_time_val ; pointer going to store the return value
    int 0x80

;;;;;;;;;;;;; CREATE FILE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
mov eax,0x08            ; create file
mov ebx, FilePath_C              ; ebx filename
mov ecx,0x1b4           ; permissions value
int 80h

mov ebx,eax              ; file descriptor to ebx
;;;;;;;;;;;;; WRITE TO FILE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
mov eax, 0x04           ; write to file
mov ecx,result        ; address of data 
mov edx,Buffer_size_C ; sz     Buffer_size_C        ; size (amount) of data
int 80h
;;;;;;;;;;;;; CLOSE FILE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
mov eax,06h            ; close file
int 80h

;;;;;;;;;;;;;;;;;;; output start_time_stamp ;;;;;;;;;;;;;;;;
;  mov eax, dword [st_time_val]
;  mov edi, str_of_time
;  call int_to_string
;  mov eax,4           ; sys_write - код 4
;  mov ebx,1           ; stdout   mycommand 2>&1    0 - STDIN, 1 - STDOUT, 2 - STDERR
;  mov ecx,str_of_time ; Адрес строки, т.е 1-го байта 
  ;mov  edx,msg_size    ; Размер строки уже в edx после завершения 'int_to_string'
;  int 0x80            ; Вызов прерывания

;;;;;;;;;;;;;;;;;;; output fin_time_stamp ;;;;;;;;;;;;;;;;
  mov eax, dword [fin_time_val]
  mov edi, str_of_time
  call int_to_string
  mov eax,4           ; sys_write - код 4
  mov ebx,1           ; stdout   mycommand 2>&1    0 - STDIN, 1 - STDOUT, 2 - STDERR
  mov ecx,str_of_time ; Адрес строки, т.е 1-го байта 
  ;mov  edx,10    ; Размер строки уже в edx после завершения 'int_to_string'
  int 0x80            ; Вызов прерывания


; now exit
exit:
  mov eax, 1
  xor ebx,ebx         ; exit code == 0
  int 0x80   

;section '.idata' import data readable
;segment readable writeable 
;f db 'c.bin',0
;somedata dd 8    ; 8 dword элементов
;sz = 32
;Buffer_size_C = 128
