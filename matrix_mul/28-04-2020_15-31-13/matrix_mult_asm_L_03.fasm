; Научились проходить все индексы 1 строки Матрицы А.
; добавляем то же и для 1 столбца матрицы В
; Перемножаем элементы матриц А и В в 1 строке и 1 столбце соответственно, суммируем, получаем 1-й элемент матрицы С 
; Переходим к следующему столбцу матрицы В
; Получили всю матрицу С. Сохраняем ее в памяти данных (см. [result])
; Записываем матрицу С в файл. Для этого используем функцию  CreateFileA
; https://docs.microsoft.com/en-us/windows/desktop/api/fileapi/nf-fileapi-createfilea

format PE console ;GUI 4.0
entry start

include 'win32a.inc'

section '.data' data readable writeable
FilePath_A db 'disk:\PATH-TO-YOUR-FILE\data_A.bin',0 ; Файл с данными матрицы А
FilePath_B db 'disk:\PATH-TO-YOUR-FILE\data_B.bin',0 ; Файл с данными матрицы В
FilePath_C db 'disk:\PATH-TO-YOUR-FILE\data_C.bin',0 ; Файл с данными матрицы C

hFile dd 0
BytesRead dd 0
BytesWritten dd 0
;Buffer rb 500000
Buffer.size_A dd 00 ; Размер матрицы А в байтах
Buffer.size_B dd 00 ; Размер матрицы В в байтах
Buffer.size_C dd 32 ; Размер матрицы С в байтах
;Buffer.size dd 100  ;equ ($ - Buffer) ; Calculates the size at compile time
;Buffer_C dd 40000
;Buf_C_Size dd 100
NULL equ 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
mxA     dd 1,2,3,2,3,4 ; Матрица А 2*3
mxrA    dd 2           ; Матрица А число строк
mxB     dd 5,6,7,8,6,7,8,9,7,8,9,10 ; Матрица B 3*4
mxrB    dd 3                        ; Матрица В число строк (и столбцов в Матрице А)
mxcolC  dd 4                        ; Матрица С (итоговая), количество столбцов (строк как в матрице А)
mxCind  dd 0                        ; индекс столбца в итоговой матрице
mxAcol  dd 0                        ; индекс столбца в матрице А
mxBrow  dd 0                        ; индекс строки в матрице В
mxArow  dd 0
mxBcol  dd 0
room_01 dd 0     ; Выравниванием память
room_02 dd 0     ; для удобства наблюдения в дебаггере
result  dd 0     ; Массив с элементами новой матрицы

;---------------------------------------------

section '.code' code readable executable

  start:
      push ebp
      mov  ebp, esp
        xor ebx,ebx  ; ЭЛЕМЕНТ МАТРИЦЫ С
        xor eax,eax   ; ИНДЕКС СТРОКИ МАТРИЦЫ А

        xor ecx,ecx   ; ЭЛЕМЕНТ МАТРИЦЫ А
        xor edx,edx   ; ЭЛЕМЕНТ МАТРИЦЫ В
        xor edi, edi

 push 0 ; Далее пригодится
 matrixA:
         ; Берем элемент из матрицы А, сохраняем в ecx
         ; mov eax, [mxA + mxAcol*4] - ТАК НЕ РАБОТАЕТ !!!
          mov ecx, [mxAcol] ; индекс столбца Матрица А
          imul ecx, 4
          
          mov ebx, [mxArow] ; индекс строки Матрица А
          imul ebx, 4
          imul ebx, [mxrB] ; mxrB - количество столбцов в А
          
          
          mov eax, mxA ; mxa + mxAcol*4 + mxArow*12 ; индекс элемента массива увеличиваем на 4 т.к. каждый элемент занимает 4 байта
          add eax, ebx 
A_fset:   add eax, ecx   ; Получили адрес элемента матрицы А

          mov edx, [eax] ; получили элемент матрицы А
          
          inc [mxAcol]

matrixB:                           ; [mxB + mxCind + mxBrow*4]
          mov edi, [mxBrow]        ; [mxCind] индекс строки матрица В
          imul edi, [mxcolC]

          mov ecx, dword [mxB + edi*4]
B_fset:   add ecx, [mxCind]        ; получили элемент матрицы B

          inc [mxBrow]
          mov esi, [mxBrow]


MatrixC:
          imul ecx, edx ; Умножаем элементы матриц A, B
          ; EBX хранит произведение элементов
          mov ebx, ecx  ; сохраняем произведение
          ;EBX хранит cумму произведений элементов, и в итоге (после n-прохода цикла )элемент матрицы С
          ; Вот тут надо элемент матрицы С положить в массив  
          ; Вычисляем положение нового элемента относительно начала массива result

          mov eax, [mxCind]  ; result + mxCind*4 + mxArow*4*mxcolC
          imul eax, 4
          mov ecx, [mxArow]
          imul ecx, 4       ; Умножаем на индекс строки
          imul ecx, [mxcolC]
          add eax, ecx
          mov ecx, result
          add ecx, eax ; Получили адрес, куда сохранить новый элемент матрицы

          ; Получили адрес элемента массива, где будет храниться новое значение элемента матрицы.

          pop edx         ; Берем предыдущую сумму элементов    
          add ebx, edx    ; ДОбавляем вновь полученный элемент, получаем новое значение суммы.
          mov [ecx], ebx  ; сохранили значение в памяти ПО НОВОМУ АДРЕСУ

          push ebx           ; сохраняем новое значение суммы в стек

          mov eax, [mxAcol]
          cmp eax, [mxrB] ; Все столбцы в строке матрицы А ?

      jne matrixA ; Переходим к следующему столбцу матрицы A в текущей строке
          ; Прошли 1 цикл умножения 1 строки матрицы А на 1 столбец матрицы В.
          ; 
          ; Переходим к следующему столбцу матрицы В, получим следующий элемент матрицы С
          ; Надо его сохрянять рядом с соседним элементом.
          mov [mxAcol], 0 ; индекс стоблца в матрице А Обнуляем
          mov [mxBrow], 0    ; индекс строки в матрице В Обнуляем

          
          push 0             ; ОБнуляем в стеке сумму элементов

          inc [mxCind]      ; начинаем новый столбец итоговой матрицы.
          mov eax, [mxcolC] ; == 100
          cmp [mxCind], eax  ; столбцов не может быть больше mxcolC
      jne matrixA        ; Переходим к следующему столбцу матрицы В, если их еще меньше 4
          ; Прошли все столбцы в матрице В, получили очередной элемент матрицы С
          ; Переходим к новой строке в матрице А
          mov [mxCind],0  ; Обнуляем счетчик столбцов матрицы В
          
          inc [mxArow]    ; индекс строки матрицы А увеличиваем          
          mov eax, [mxArow]
          cmp [mxrA], eax  ; Все строки в матрице А ? 
      jne matrixA      ; Переходим к следующей строке в матрице А
         
            invoke CreateFileA,FilePath_C,GENERIC_WRITE,NULL,NULL,CREATE_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL 
            mov [hFile],eax
            ; write Buffer.size byte from Buffer to the file; actual bytes written put into BytesWritten
            invoke WriteFile,[hFile],result,[Buffer.size_C],[BytesWritten],NULL 
            invoke CloseHandle,[hFile] ; done


        call [ExitProcess] ; Go back to the calling procedure (system, whatever)

section '.idata' import data readable
 
library kernel32, 'kernel32.dll', \
        msvcrt,'msvcrt.dll'

import kernel32, \
       CreateFileA,'CreateFileA', \
       WriteFile,'WriteFile', \       
       ReadFile, 'ReadFile', \
       CloseHandle, 'CloseHandle', \
       ExitProcess,'ExitProcess'
 
import  msvcrt, \
        printf, 'printf'