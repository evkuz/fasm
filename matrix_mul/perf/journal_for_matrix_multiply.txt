Журнал работ по проекту matrix_multuply


работаем в папке  /home/evkuz/asm/matrix_mul/perf


//+++++++++++++++++++++++++++++++
30.04.2021
matrix_mult_param_opt_02.fasm
Заменил 8 команд, вычисляющих индекс элемента в матрице C на 1 команду stosd - выигрыша по времени не дало !
Также добавил вычисление и вывод на экран разницы во времени начала и конца перемножения.
ДОбавил скрипт gemm_check_md5.sh, последовательно запускающий 3 разных файла, перемножающих матрицы, вывод времени в отдельны файл и 
подсчет md5sum для полученных матриц.


//+++++++++++++++++++++++++++
28.04.2021
Будем проверять алгоритм последовательного прохождения на маленьких матрицах.
- файл gemm_lods_02_4x5x3.fasm
Далее будем работать с matrix_mult_param_opt_02.fasm
Файл matrix_mult_param_optimized.fasm - сохраняем для истории.

//++++++++++++++++++++
1. ДОбавил в randomizer_param 	ОСВОБОЖДЕНИЕ ПАМЯТИ. Его там не было !!! Хорошо, что наткнулся на собственный комментарий об этом.

2. Надо переносить код переменожения из файла gemm_lods_02_4x5x3.fasm т.к. там оптимизация.
  Файл gemm_lods_02_4x5x3.fasm оказался довольно кривой.
  
НА мою удачу я ранее уже сделал оптимизацию - файл gemm_opt_02.fasm
Переменожает матрицы 2000х1000 на 1000х2000 за 17 сек. вместо 19-20 сек.


3. Я уловил идею с хабра : "В оригинальной версии доступ к элементам массива B производится не последовательно. Его можно упорядочить, если поменять порядок вычисления таким образом, чтобы внутренним циклом был последовательный обход по строчкам для всех трех матриц"

void gemm_v1(int M, int N, int K, const float * A, const float * B, float * C)
{
    for (int i = 0; i < M; ++i)
    {
        float * c = C + i * N;
        for (int j = 0; j < N; ++j)
            c[j] = 0;
        for (int k = 0; k < K; ++k)
        {
            const float * b = B + k * N;
            float a = A[i*K + k];
            for (int j = 0; j < N; ++j)
                c[j] += a * b[j];
        }
    }
}

Здесь ключевое - последовательный обход по всем строчкам для всех трех матриц.
Т.е. умножаем строку А на строку В получаем Строку С.
Далее к строке С сумммируем элементы из последующих строк А и В.

Будем выполнять тестовое перемножение матрицы 4х5х3 и сравнивать полученную матрицу с образцом (проверка md5sum)
И когда md5sum совпадут, значит алгоритм заработал правильно.


