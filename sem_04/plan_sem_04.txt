plan_sem_04

1. func - демонстрация перехода

2. str_02.fasm - модификация входной строки
              Команды stos, lods, loop
              вывод обеих строк



3. str_ops_03.fasm - разные строковые операции.
                     movs[bwd], lods/stos[bwd], 



4. reflect_input - Вычисление длины строки.
                   Дублирование входной строки(но уже с известной длиной, вычисление длины строки)
                


          Влияние флага fd
4.1 модифицируем str_ops -> str_ops_02 так, что меняем значение fd и смотрим результат
    результат - так себе, ничего необычного

5. str_reverse - Разворот строки 
5.0 Добавить считывание строки пользователя и разворот этой строки.(это задание себе), а вместе с этим оформить подпрограмму, считывающую ввод пользователя и возвращающую адрес + длина строки.


5.1 test_af/_02 - Проверка флага AF (с использованием 'bt' и без нее)

6. str_cmp    - Сравнение 2 строк. Две сходные, но разные операции cmps[bwd] и cmps dword [esi]...
   str_cmp_02 - Сравнение 2 строк. scas
;Пример использования repe.

;7. перевод строки в верхник/нижний регистр

8. logic_ops - Примеры использования : xor, bsf, bsr, 

- Разворот строки с использованием df
- Разворот строки с использованием стека

07 06 05 04  03 02 01 00
              1  0  1  0
              1  1  1  1
              0  1  0  1
  


0x00 01 03 02
    |---------байт 1-------|  |---------байт 0-------|
16  15 14 13 12  11 10 09 08  07 06 05 04  03 02 01 00
 1			1  1	   	          1
 RF                 DF IF  TF

            bc
0x 08 04 90 c4

            c6
0x 08 04 90 ce
####################################
            C0
0x 08 04 90 c8
            ca
0x 08 04 90 d2


logic_ops - демонстрация логических операций.

AX = AH AL						0x00CC
16  15 14 13 12  11 10 09 08  07 06 05 04  03 02 01 00
                               1  1  0  0   1  1  0  0
							0x0330
16  15 14 13 12  11 10 09 08  07 06 05 04  03 02 01 00
                  0  0  1  1   0  0  1  1   0  0  0  0

##########################################################################

AX = AH AL						0xC0CC
16  15 14 13 12  11 10 09 08  07 06 05 04  03 02 01 00
     1  1  0  0   0  0  0  0   1  1  0  0   1  1  0  0
							0x0333
16  15 14 13 12  11 10 09 08  07 06 05 04  03 02 01 00
     0  0  0  0   0  0  1  1   0  0  1  1   0  0  1  1


##########################################################################

AX = AH AL						0x08CC
16  15 14 13 12  11 10 09 08  07 06 05 04  03 02 01 00
     0  0  0  0   1  0  0  0   1  1  0  0   1  1  0  0
							0x4667 = shld 0x08CC, 0xE000, 3
16  15 14 13 12  11 10 09 08  07 06 05 04  03 02 01 00
     0  1  0  0   0  1  1  0   0  1  1  0   0  1  1  1

##########################################################################
						   0x000E >> 0x2330 >> 2
15 14 13 12  11 10 09 08  07 06 05 04  03 02 01 00 
       1            1  1         1  1 


15 14 13 12  11 10 09 08  07 06 05 04  03 02 01 00
 1  1         1   	   1  1         1  1





