;rdtscp_01 убрал лишнюю переменную cpu_1_val - сравни с rdtscp.fasm
; В будущем она все же понадобится т.к. вызов ф-ции int_2_str будет не сразу следом за rdtscp, а позже.
;
; rdtscp_02 Делаем ПРАВИЛЬНОЕ вычитание счетчика EDX:EAX

; rdtscp_04 Добавляем вычитание данных "в лоб". Надо довести до ума
; rdtscp_05 Доводим до ума вычитание данных "в лоб". Вывод 1-й rdtscp в 1 строку.
; rdtscp_06 Доводим до ума вычитание данных "в лоб". Вывод 2-й rdtscp в 1 строку.
; Видим, что разница между hex числами такая же как выводимое число.
; rdtscp_07 Добавляем вывод номера ядра !

; !!!!!!!!!!  ЭТО РАБОЧИЙ ВАРИАНТ !!!!!!!!!!!!!!!!

format ELF executable 3
entry start

segment readable executable

include 'int_2_str.inc'
include 'hex-dword-2-str.inc'
start:

mov edi, d_val   ; строка будет хранить символы числового значения, поэтому d_val
rdtscp   ; записываем число - номер ядра

; get EDX:EAX - 1st value of ticks
mov ebx,EAX
mov ecx,EDX 

mov [rdtscp1_val], EDX     ; кладем в память старшие 32 бита
mov [rdtscp1_val + 4], EAX ; кладем младшие 32 бита в память по адресу на 4 байта ДАЛЬШЕ, чем первые 32 бита. 
                           ; для младших 32 бит Память зарезервирована

rdtscp ; get new values for ticks

mov [rdtscp2_val], EDX     ; кладем в память старшие 32 бита
mov [rdtscp2_val + 4], EAX ; кладем младшие 32 бита в память по адресу на 4 байта ДАЛЬШЕ, чем первые 32 бита

; Начинаем вычислять разницу в значениях rdtscp1_val и rdtscp2_val
sub eax, ebx ; Вычитаем младшие 32 бит, смотрим cf
; если не было переноса значит в старших 32 битах одинаково.
; и тогда результатом будет полученное значение. Идем на output
mov [diff_val], eax ; Сохраняем разницу в переменную.
jnc output

; А если CF установлен, то идем на вычитание старших 32 бит
; sbb subtracts the source operand from the destination operand, subtracts one if CF is set, 
; and stores the result to the destination operand. 
sbb edx, ecx
mov [diff_val], edx ; Сохраняем разницу в переменную.

; и уже потом на output
; 
output:
; Выводим сопроводительное сообщение по номеру ядра

  mov eax,4
  mov ebx,1
  mov ecx,core_msg
  mov edx,sz_core_msg
  int 0x80

; Перводим номер ядра в строку
mov al, [core_number]
mov edi, core_number_str
call int_to_string
mov [sz_core_number_str], dl

; Выводим номер ядра  
   mov eax,4
   mov ebx,1
   mov ecx,core_number_str
   mov dl,[sz_core_number_str] 
   int 0x80

; Перводим в строку разницу в тиках
    mov eax, [diff_val]
    mov edi, d_val   ; строка будет хранить символы числового значения, поэтому d_val 
    call int_to_string
    mov [sz_d_val], dl ; записываем число - количество байт в строке d_val

; comment message
   mov eax,4
   mov ebx,1
   mov ecx,diff
   mov dl, sz_diff
   int 0x80

; Выводим разницу как строку в 10-чном виде

   mov eax,4
   mov ebx,1
   mov ecx, d_val
   mov dl, [sz_d_val]
   int 0x80

; Вводим значения тиков в hex-виде.
direct_subtraction:
; Выводим значение 1-й rdtscp
; Т.к. число 64-битное, то выводим 2 раза по 32 бит в hex-виде.
;
; Сначала старшие 32 бит (EDX)
 mov eax, [rdtscp1_val]
 mov edi, hexstr
 call hex_dword_2_str ; Переводим в строку старшие 32 бита, строка будет длиной 8 символов (32 бита в hex-виде)

; Выводить не обязательно, лучше добавим младшие 32 бита и выведем одной строкой

; Записываем младшие 32 бита
 mov eax, [rdtscp1_val + 4]
 mov edi, hexstr  ; Начало строки там же, где старшие 32 бита         
 add edi, 8       ; А теперь сдвигаем на 8 символов вперед, куда будут записаны символы младших 32 бит
 call hex_dword_2_str ; Переводим в строку младшие 32 бита, строка будет длиной 8 символов (32 бита в hex-виде)
 mov [hexstr + 16], 0xA ; Добавляем в конец строки \n

; Выводим сразу 16 символов + перевод строки
    mov eax,4
    mov ebx,1
    mov ecx, hexstr
    mov edx,17 ; Так нагляднее
    int 0x80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Выводим значение 2-й rdtscp
; Т.к. число 64-битное, то выводим 2 раза по 32 бит в hex-виде.
;
; Сначала старшие 32 бит (EDX)
 mov eax, [rdtscp2_val]
 mov edi, hexstr
 call hex_dword_2_str

 mov eax, [rdtscp2_val + 4]
 mov edi, hexstr
 add edi, 8
 call hex_dword_2_str
 mov [hexstr + 16], 0xA

; Выводим сразу 16 символов + перевод строки
    mov eax,4
    mov ebx,1
    mov ecx, hexstr
    mov edx,17 ; Так нагляднее
    int 0x80



;;;;;;;;;;;;;; end of direct_subtraction:
; now exit 
mov	eax,1           ; sys_exit
xor	ebx,ebx         ; exit code == 0
int	0x80            ; Вызов прерывания



segment readable writeable
core_number     rb 2 ; число, означающее номер ядра
core_number_str rb 2 ; 1 цифра + перевод строки.
sz_core_number_str db 2; длина строки как параметр системного вызова
;= $ - core_number_str ; длина строки

core_msg db 'Core number is : '         
sz_core_msg = $ - core_msg

diff db 'The difference in ticks is : '
sz_diff = $ - diff

diff_val rd 1

d_val rb 12    ; число символов в строке, резервируем
sz_d_val rb 1  ; ячейка хранящая это число

rdtscp1_val rd 2 ; данные счетчика 1 - 64 бита
rdtscp2_val rd 2 ; данные счетчика 2 - 64 бита

addr db 0

hexstr rb 8
;sz_hexstr = 17



